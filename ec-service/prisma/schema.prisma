// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  firstName     String
  lastName      String
  role          Role       @default(CUSTOMER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  orders        Order[]
  cart          Cart?
  wishlist      Wishlist?
}

model Product {
  id            String     @id @default(uuid())
  name          String
  description   String     @db.Text
  price         Float
  stock         Int
  images        String     @db.Text
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  description   String?    @db.Text
  parentId      String?
  parent        Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryToCategory")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Cart {
  id            String     @id @default(uuid())
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id])
  items         CartItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model CartItem {
  id            String     @id @default(uuid())
  cartId        String
  cart          Cart       @relation(fields: [cartId], references: [id])
  productId     String
  product       Product    @relation(fields: [productId], references: [id])
  quantity      Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Float
  address       String     @db.Text
  paymentId     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OrderItem {
  id            String     @id @default(uuid())
  orderId       String
  order         Order      @relation(fields: [orderId], references: [id])
  productId     String
  product       Product    @relation(fields: [productId], references: [id])
  quantity      Int
  price         Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Wishlist {
  id            String     @id @default(uuid())
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id])
  items         WishlistItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model WishlistItem {
  id            String     @id @default(uuid())
  wishlistId    String
  wishlist      Wishlist   @relation(fields: [wishlistId], references: [id])
  productId     String
  product       Product    @relation(fields: [productId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([wishlistId, productId])
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
