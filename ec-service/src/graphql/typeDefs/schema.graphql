type Query {
  # Health check
  healthCheck: String

  # User
  me: User
  users: [User!]!
  user(id: ID!): User
  
  # Product 
  products(
    search: String
    categoryId: ID
    sortBy: String
    sortDirection: String
    limit: Int
    offset: Int
  ): ProductConnection!
  product(id: ID!): Product
  
  # Category
  categories: [Category!]!
  category(id: ID!): Category
  
  # Cart
  cart: Cart
  
  # Order
  orders: [Order!]!
  order(id: ID!): Order
  
  # Wishlist
  wishlist: Wishlist
}

type Mutation {
  # Auth
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  
  # User
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  
  # Product
  createProduct(input: CreateProductInput!): Product!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  deleteProduct(id: ID!): Boolean!
  
  # Category
  createCategory(input: CreateCategoryInput!): Category!
  updateCategory(id: ID!, input: UpdateCategoryInput!): Category!
  deleteCategory(id: ID!): Boolean!
  
  # Cart
  addToCart(productId: ID!, quantity: Int!): CartItem!
  updateCartItem(id: ID!, quantity: Int!): CartItem!
  removeFromCart(id: ID!): Boolean!
  clearCart: Boolean!
  
  # Order
  createOrder(input: CreateOrderInput!): Order!
  updateOrderStatus(id: ID!, status: OrderStatus!): Order!
  
  # Wishlist
  addToWishlist(productId: ID!): WishlistItem!
  removeFromWishlist(id: ID!): Boolean!
}

# User types
type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  role: Role!
  createdAt: String!
  updatedAt: String!
  orders: [Order!]!
  cart: Cart
  wishlist: Wishlist
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

# Auth types
type AuthPayload {
  token: String!
  user: User!
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

# Product types
type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Int!
  images: [String!]!
  category: Category!
  createdAt: String!
  updatedAt: String!
}

type ProductConnection {
  edges: [Product!]!
  totalCount: Int!
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Int!
  images: [String!]!
  categoryId: ID!
}

input UpdateProductInput {
  name: String
  description: String
  price: Float
  stock: Int
  images: [String!]
  categoryId: ID
}

# Category types
type Category {
  id: ID!
  name: String!
  description: String
  parent: Category
  children: [Category!]!
  products: [Product!]!
  createdAt: String!
  updatedAt: String!
}

input CreateCategoryInput {
  name: String!
  description: String
  parentId: ID
}

input UpdateCategoryInput {
  name: String
  description: String
  parentId: ID
}

# Cart types
type Cart {
  id: ID!
  user: User!
  items: [CartItem!]!
  createdAt: String!
  updatedAt: String!
}

type CartItem {
  id: ID!
  product: Product!
  quantity: Int!
  createdAt: String!
  updatedAt: String!
}

# Order types
type Order {
  id: ID!
  user: User!
  items: [OrderItem!]!
  status: OrderStatus!
  total: Float!
  address: String!
  paymentId: String
  createdAt: String!
  updatedAt: String!
}

type OrderItem {
  id: ID!
  product: Product!
  quantity: Int!
  price: Float!
  createdAt: String!
  updatedAt: String!
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

input CreateOrderInput {
  address: String!
  paymentId: String
}

# Wishlist types
type Wishlist {
  id: ID!
  user: User!
  items: [WishlistItem!]!
  createdAt: String!
  updatedAt: String!
}

type WishlistItem {
  id: ID!
  product: Product!
  createdAt: String!
  updatedAt: String!
}